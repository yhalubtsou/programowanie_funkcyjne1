1) Użyj funkcji product z modułu itertools, aby wygenerować i wydrukować wszystkie możliwe kombinacje liter z dwóch list: ['A', 'B'] i ['C', 'D'].

2) Napisz funkcję, która przyjmuje listę elementów i zwraca listę wszystkich możliwych 2-elementowych kombinacji tych elementów.

3) Zaimplementuj funkcję generatorową fibonacci, która generuje nieskończony ciąg liczb Fibonacciego i wydrukuj pierwsze 10 liczb tego ciągu.

4) Użyj wyrażenia walrus operator (:=) wewnątrz list comprehension, aby stworzyć i wydrukować listę kwadratów liczb z podanej listy, które są większe niż 10.

5) Napisz jednolinijkową funkcję is_palindrome, która sprawdza, czy dany ciąg znaków (bez uwzględniania wielkości liter i białych znaków) jest palindromem.

6) Zaimplementuj dekorator safe_function, który łapie wyjątki podczas wywołania funkcji i zamiast przerywać program, wypisuje informację o błędzie i zwraca None. Przetestuj dekorator na funkcji dzielącej dwie liczby.

7) Użyj funkcji groupby z modułu itertools, aby zgrupować ciąg liczb całkowitych na podstawie ich parzystości i wydrukować wynikowe grupy.

8) Napisz wyrażenie lambda, które przyjmuje trzy argumenty i zwraca ich średnią arytmetyczną. Wydrukuj wynik dla trzech przykładowych liczb.

9) Stwórz i wydrukuj macierz 3x3 za pomocą zagnieżdżonej listy składanej, wypełnioną wartościami od 1 do 9.

10) Napisz funkcję concat_strings, która przyjmuje nieokreśloną liczbę argumentów typu string i łączy je w jeden ciąg znaków, rozdzielając spacją. Przetestuj funkcję na kilku zestawach stringów.